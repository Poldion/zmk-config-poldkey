#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>
#include <zephyr/dt-bindings/gpio/gpio.h>

&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 31)>;
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 31)>;
            low-power-enable;
        };
    };

    /* I2C remap for OLED: SDA=P0.02 (D2), SCL=P0.20 (D3) */
    i2c0_dongle_default: i2c0_dongle_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 2)>, <NRF_PSEL(TWIM_SCL, 0, 20)>;
        };
    };

    i2c0_dongle_sleep: i2c0_dongle_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 2)>, <NRF_PSEL(TWIM_SCL, 0, 20)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";

    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        status = "okay"; /* no physical LEDs on dongle, used to init RGB + proxy */
        reg = <0>;
        spi-max-frequency = <4000000>;
        chain-length = <1>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

&pro_micro_i2c {
    status = "okay";
    pinctrl-0 = <&i2c0_dongle_default>;
    pinctrl-1 = <&i2c0_dongle_sleep>;
    pinctrl-names = "default", "sleep";
};

/ {
    chosen {
        zmk,kscan = &mock_kscan;
        zmk,physical-layout = &physical_layout0;
        zmk,underglow = &led_strip; /* enabled stub for RGB compile/proxy */
        /* events moved into mock_kscan so DT will generate DT_*_events_LEN */
    };

    mock_kscan: mock_kscan {
        compatible = "zmk,kscan-mock";
        events = <>; /* ensure the mock kscan node defines an 'events' property (can be empty) */
    };

    default_transform: matrix_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <8>;
        rows = <9>;
        map = <
            RC(0,0) RC(1,0) RC(2,0) RC(3,0) RC(4,0) RC(5,0) RC(6,0) RC(7,0) RC(8,0) RC(8,1) RC(7,1) RC(6,1) RC(5,1) RC(4,7) RC(0,7)
            RC(2,7) RC(4,1) RC(3,1) RC(2,1) RC(1,1) RC(0,1) RC(8,2) RC(7,2) RC(6,2) RC(5,2) RC(4,2) RC(3,2) RC(2,2) RC(5,7) RC(8,6)
            RC(1,7) RC(1,2) RC(0,2) RC(8,3) RC(7,3) RC(6,3) RC(4,3) RC(3,3) RC(2,3) RC(1,3) RC(0,3) RC(8,4) RC(7,4) RC(5,3)
            RC(7,6) RC(6,4) RC(5,4) RC(4,4) RC(3,4) RC(2,4) RC(1,4) RC(0,4) RC(0,5) RC(1,5) RC(2,5) RC(3,5) RC(3,7) RC(5,5)
            RC(0,6) RC(1,6) RC(2,6) RC(8,5) RC(3,6) RC(4,6) RC(5,6) RC(6,6) RC(6,5) RC(4,5) RC(7,5)
        >;
    };

    physical_layout0: physical_layout_0 {
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";
        transform = <&default_transform>;
    };
};

/* Provide the node label the module expects on nice!nano */
xiao_i2c: &pro_micro_i2c {};